

using System;
using System.Collections.Generic;
using System.Linq;

namespace Generator.Log
{
    /// <summary>
    /// Generator klasy logującej dla maszyny stanów.
    /// Tworzy statyczną klasę {ClassName}Log z zestawem metod rozszerzających ILogger.
    /// </summary>
    public sealed class LoggingClassGenerator
    {
        private readonly string _className;
        private readonly string _namespace;

        private readonly IndentedStringBuilder.IndentedStringBuilder _sb =
            new IndentedStringBuilder.IndentedStringBuilder("    ");

        /// <summary>
        /// Dodatkowe usingi do wstawienia w nagłówku wygenerowanego pliku.
        /// </summary>
        public ICollection<string> AdditionalUsings { get; } =
            new List<string> { "System", "Microsoft.Extensions.Logging" };

        public LoggingClassGenerator(string className, string ns)
        {
            _className = className ?? throw new ArgumentNullException(nameof(className));
            _namespace = ns ?? string.Empty;
        }

        public string Generate()
        {
            WriteHeader();
            WriteNamespaceAndClass();
            return _sb.ToString();
        }

        private void WriteHeader()
        {
            _sb.AppendLine("// <auto-generated/>");
            _sb.AppendLine("#nullable enable");

            foreach (var u in AdditionalUsings.OrderBy(n => n, StringComparer.Ordinal))
                _sb.AppendLine($"using {u};");

            _sb.AppendLine(); // pusta linia
        }

        private void WriteNamespaceAndClass()
        {
            if (!string.IsNullOrEmpty(_namespace))
            {
                using (_sb.Block($"namespace {_namespace}"))
                {
                    WriteLogClass();
                }
            }
            else
            {
                WriteLogClass();
            }
        }

        private void WriteLogClass()
        {
            _sb.WriteSummary($"High-performance logging for {_className} state machine");
            _sb.AppendLine("[System.CodeDom.Compiler.GeneratedCode(\"StateMachineGenerator\", \"1.0.0\")]");

            using (_sb.Block($"internal static class {_className}Log"))
            {
                WriteTransitionSucceededMethod();
                WriteGuardFailedMethod();
                WriteTransitionFailedMethod();
                WriteOnEntryExecutedMethod();
                WriteOnExitExecutedMethod();
                WriteActionExecutedMethod();
                WritePayloadValidationFailedMethod();
                WriteInternalTransitionOnAncestorMethod();
                WriteHierarchicalTransitionMethod();
                WriteCompositeStateEntryMethod();
                WriteHistoryRestoredMethod();
                WriteActivePathMethod();
            }
        }

        private void WriteTransitionSucceededMethod()
        {
            _sb.WriteSummary("Logs successful state transition");
            using (_sb.Block("public static void TransitionSucceeded(this ILogger logger, string instanceId, string fromState, string toState, string trigger)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Information))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Information,");
                        _sb.AppendLine("new EventId(1, nameof(TransitionSucceeded)),");
                        _sb.AppendLine("\"State machine {InstanceId} transitioned from {FromState} to {ToState} on trigger {Trigger}\",");
                        _sb.AppendLine("instanceId, fromState, toState, trigger);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteGuardFailedMethod()
        {
            _sb.WriteSummary("Logs when guard prevents transition");
            using (_sb.Block("public static void GuardFailed(this ILogger logger, string instanceId, string guardName, string fromState, string toState, string trigger)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Warning))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Warning,");
                        _sb.AppendLine("new EventId(2, nameof(GuardFailed)),");
                        _sb.AppendLine("\"State machine {InstanceId} guard {GuardName} prevented transition from {FromState} to {ToState} on trigger {Trigger}\",");
                        _sb.AppendLine("instanceId, guardName, fromState, toState, trigger);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteTransitionFailedMethod()
        {
            _sb.WriteSummary("Logs when no valid transition found");
            using (_sb.Block("public static void TransitionFailed(this ILogger logger, string instanceId, string fromState, string trigger)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Warning))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Warning,");
                        _sb.AppendLine("new EventId(3, nameof(TransitionFailed)),");
                        _sb.AppendLine("\"State machine {InstanceId} failed to transition from {FromState} on trigger {Trigger} - no valid transition found\",");
                        _sb.AppendLine("instanceId, fromState, trigger);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteOnEntryExecutedMethod()
        {
            _sb.WriteSummary("Logs OnEntry method execution");
            using (_sb.Block("public static void OnEntryExecuted(this ILogger logger, string instanceId, string methodName, string state)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Debug))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Debug,");
                        _sb.AppendLine("new EventId(4, nameof(OnEntryExecuted)),");
                        _sb.AppendLine("\"State machine {InstanceId} executed OnEntry {MethodName} for state {State}\",");
                        _sb.AppendLine("instanceId, methodName, state);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteOnExitExecutedMethod()
        {
            _sb.WriteSummary("Logs OnExit method execution");
            using (_sb.Block("public static void OnExitExecuted(this ILogger logger, string instanceId, string methodName, string state)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Debug))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Debug,");
                        _sb.AppendLine("new EventId(5, nameof(OnExitExecuted)),");
                        _sb.AppendLine("\"State machine {InstanceId} executed OnExit {MethodName} for state {State}\",");
                        _sb.AppendLine("instanceId, methodName, state);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteActionExecutedMethod()
        {
            _sb.WriteSummary("Logs action execution during transition");
            using (_sb.Block("public static void ActionExecuted(this ILogger logger, string instanceId, string actionName, string fromState, string toState, string trigger)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Debug))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Debug,");
                        _sb.AppendLine("new EventId(6, nameof(ActionExecuted)),");
                        _sb.AppendLine("\"State machine {InstanceId} executed action {ActionName} during transition from {FromState} to {ToState} on trigger {Trigger}\",");
                        _sb.AppendLine("instanceId, actionName, fromState, toState, trigger);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WritePayloadValidationFailedMethod()
        {
            _sb.WriteSummary("Logs payload validation failure");
            using (_sb.Block("public static void PayloadValidationFailed(this ILogger logger, string instanceId, string trigger, string expectedType, string actualType)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Warning))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Warning,");
                        _sb.AppendLine("new EventId(7, nameof(PayloadValidationFailed)),");
                        _sb.AppendLine("\"State machine {InstanceId} payload validation failed for trigger {Trigger} - expected {ExpectedType}, got {ActualType}\",");
                        _sb.AppendLine("instanceId, trigger, expectedType, actualType);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteInternalTransitionOnAncestorMethod()
        {
            _sb.WriteSummary("Logs internal transition executed on ancestor state");
            using (_sb.Block("public static void InternalTransitionOnAncestor(this ILogger logger, string instanceId, string ancestorState, string currentState, string trigger)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Information))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Information,");
                        _sb.AppendLine("new EventId(10, nameof(InternalTransitionOnAncestor)),");
                        _sb.AppendLine("\"State machine {InstanceId} executed internal transition on ancestor {AncestorState} while in {CurrentState} on trigger {Trigger}\",");
                        _sb.AppendLine("instanceId, ancestorState, currentState, trigger);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteHierarchicalTransitionMethod()
        {
            _sb.WriteSummary("Logs hierarchical transition with LCA information");
            using (_sb.Block("public static void HierarchicalTransition(this ILogger logger, string instanceId, string fromState, string toState, string lcaState, int exitCount, int entryCount)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Debug))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Debug,");
                        _sb.AppendLine("new EventId(11, nameof(HierarchicalTransition)),");
                        _sb.AppendLine("\"State machine {InstanceId} hierarchical transition from {FromState} to {ToState} via LCA {LcaState} - exiting {ExitCount} states, entering {EntryCount} states\",");
                        _sb.AppendLine("instanceId, fromState, toState, lcaState, exitCount, entryCount);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteCompositeStateEntryMethod()
        {
            _sb.WriteSummary("Logs entry into composite state with resolution");
            using (_sb.Block("public static void CompositeStateEntry(this ILogger logger, string instanceId, string compositeState, string resolvedTarget, string resolutionMethod)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Debug))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Debug,");
                        _sb.AppendLine("new EventId(12, nameof(CompositeStateEntry)),");
                        _sb.AppendLine("\"State machine {InstanceId} entering composite state {CompositeState}, resolved to {ResolvedTarget} using {ResolutionMethod}\",");
                        _sb.AppendLine("instanceId, compositeState, resolvedTarget, resolutionMethod);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteHistoryRestoredMethod()
        {
            _sb.WriteSummary("Logs history restoration");
            using (_sb.Block("public static void HistoryRestored(this ILogger logger, string instanceId, string compositeState, string restoredState, string historyType)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Debug))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Debug,");
                        _sb.AppendLine("new EventId(13, nameof(HistoryRestored)),");
                        _sb.AppendLine("\"State machine {InstanceId} restored {HistoryType} history for composite {CompositeState} to state {RestoredState}\",");
                        _sb.AppendLine("instanceId, historyType, compositeState, restoredState);");
                    }
                }
            }
            _sb.AppendLine();
        }

        private void WriteActivePathMethod()
        {
            _sb.WriteSummary("Logs the active state path");
            using (_sb.Block("public static void ActivePath(this ILogger logger, string instanceId, string path)"))
            {
                using (_sb.Block("if (logger.IsEnabled(LogLevel.Trace))"))
                {
                    _sb.AppendLine("logger.Log(");
                    using (_sb.Indent())
                    {
                        _sb.AppendLine("LogLevel.Trace,");
                        _sb.AppendLine("new EventId(14, nameof(ActivePath)),");
                        _sb.AppendLine("\"State machine {InstanceId} active path: {Path}\",");
                        _sb.AppendLine("instanceId, path);");
                    }
                }
            }
            _sb.AppendLine();
        }

        // ---- Statyczne helpery używane przez inne generatory ----

        public static void WriteLoggerField(string className, ref IndentedStringBuilder.IndentedStringBuilder sb)
        {
            sb.AppendLine($"private readonly ILogger<{className}>? _logger;");
            sb.AppendLine("private readonly string _instanceId = Guid.NewGuid().ToString();");
            sb.AppendLine();
        }

        public static string GetLoggerConstructorParameter(string className, ref IndentedStringBuilder.IndentedStringBuilder sb)
        {
            // sb jest tu nieużywany, ale zostawiamy podpis zgodny z oryginałem
            return $"ILogger<{className}>? logger = null";
        }

        public static void WriteLoggerAssignment(ref IndentedStringBuilder.IndentedStringBuilder sb)
        {
            sb.AppendLine("_logger = logger;");
        }

        public static void WriteLogStatement(string className, string logLevel, string logMethodCall, ref IndentedStringBuilder.IndentedStringBuilder sb)
        {
            using (sb.Block($"if (_logger?.IsEnabled(LogLevel.{logLevel}) == true)"))
            {
                sb.AppendLine($"{className}Log.{logMethodCall}");
            }
        }
    }
}
