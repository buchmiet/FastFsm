// <auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using StateMachine.Contracts;
using StateMachine.Runtime;
using Generator.Async.Tests.Implementations;

namespace MyTest.Machines
{
    public interface ITestAsyncMachine : IAsyncStateMachine<TestState, TestTrigger> { }

    public partial class TestAsyncMachine : AsyncStateMachineBase<TestState, TestTrigger>, ITestAsyncMachine
    {
        public TestAsyncMachine(TestState initialState) : base(initialState, continueOnCapturedContext: false)
        {
        }

        protected override async ValueTask<bool> TryFireInternalAsync(TestTrigger trigger, object? payload, CancellationToken cancellationToken)
        {
            return false; // No transitions defined
        }
        public override async ValueTask<bool> CanFireAsync(TestTrigger trigger, CancellationToken cancellationToken = default)
        {
            switch (_currentState)
            {
                default: return false;
            }
        }

        public override async ValueTask<IReadOnlyList<TestTrigger>> GetPermittedTriggersAsync(CancellationToken cancellationToken = default)
        {
            switch (_currentState)
            {
                case TestState.A: return System.Array.Empty<TestTrigger>();
                case TestState.B: return System.Array.Empty<TestTrigger>();
                case TestState.C: return System.Array.Empty<TestTrigger>();
                default: return System.Array.Empty<TestTrigger>();
            }
        }

    }
}
